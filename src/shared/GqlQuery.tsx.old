// import React from 'react';

// import { Spinner } from '@erkenningen/ui';
// import { OperationVariables, Query } from 'react-apollo';

// interface IGqlQueryProps {
//   query: any; // DocumentNode;
//   variables?: OperationVariables;
//   forceNetwork?: boolean;
//   ignoreAuthError?: boolean;
// }

// class GqlQuery<T> extends React.Component<IGqlQueryProps, {}> {
//   public render() {
//     return (
//       <Query<T>
//         query={this.props.query}
//         variables={this.props.variables}
//         fetchPolicy={this.props.forceNetwork ? 'network-only' : 'cache-first'}
//       >
//         {({ loading, error, data }) => {
//           if (error) {
//             // Check if auth error and ignore if set
//             for (const err of error.graphQLErrors) {
//               if (err.extensions && err.extensions.code === 'UNAUTHENTICATED') {
//                 if (this.props.ignoreAuthError) {
//                   return (this.props.children as ((data: any) => {}))(null);
//                 }
//               }
//             }
//             return <div> Error ...</div>; // <GqlError error={error} />;
//           }
//           if (loading) {
//             return (
//               <div className="spinnerContainer">
//                 <Spinner />
//               </div>
//             );
//           }

//           if (!data) {
//             return null;
//           }

//           return (this.props.children as ((data: any) => {}))(data);
//         }}
//       </Query>
//     );
//   }
// }

// export default GqlQuery;
